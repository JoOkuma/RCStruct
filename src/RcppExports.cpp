// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// createCStruct
SEXP createCStruct(SEXP a, SEXP b);
RcppExport SEXP _RCStruct_createCStruct(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(createCStruct(a, b));
    return rcpp_result_gen;
END_RCPP
}
// updateCStruct
SEXP updateCStruct(SEXP obj, SEXP a, SEXP b);
RcppExport SEXP _RCStruct_updateCStruct(SEXP objSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(updateCStruct(obj, a, b));
    return rcpp_result_gen;
END_RCPP
}
// showCStruct
void showCStruct(SEXP obj);
RcppExport SEXP _RCStruct_showCStruct(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);
    showCStruct(obj);
    return R_NilValue;
END_RCPP
}
// addCStruct
SEXP addCStruct(SEXP obj1, SEXP obj2);
RcppExport SEXP _RCStruct_addCStruct(SEXP obj1SEXP, SEXP obj2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type obj1(obj1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj2(obj2SEXP);
    rcpp_result_gen = Rcpp::wrap(addCStruct(obj1, obj2));
    return rcpp_result_gen;
END_RCPP
}
// subCStruct
SEXP subCStruct(SEXP obj1, SEXP obj2);
RcppExport SEXP _RCStruct_subCStruct(SEXP obj1SEXP, SEXP obj2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type obj1(obj1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj2(obj2SEXP);
    rcpp_result_gen = Rcpp::wrap(subCStruct(obj1, obj2));
    return rcpp_result_gen;
END_RCPP
}
// eqCStruct
SEXP eqCStruct(SEXP obj1, SEXP obj2);
RcppExport SEXP _RCStruct_eqCStruct(SEXP obj1SEXP, SEXP obj2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type obj1(obj1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj2(obj2SEXP);
    rcpp_result_gen = Rcpp::wrap(eqCStruct(obj1, obj2));
    return rcpp_result_gen;
END_RCPP
}
// difCStruct
SEXP difCStruct(SEXP obj1, SEXP obj2);
RcppExport SEXP _RCStruct_difCStruct(SEXP obj1SEXP, SEXP obj2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type obj1(obj1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj2(obj2SEXP);
    rcpp_result_gen = Rcpp::wrap(difCStruct(obj1, obj2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RCStruct_createCStruct", (DL_FUNC) &_RCStruct_createCStruct, 2},
    {"_RCStruct_updateCStruct", (DL_FUNC) &_RCStruct_updateCStruct, 3},
    {"_RCStruct_showCStruct", (DL_FUNC) &_RCStruct_showCStruct, 1},
    {"_RCStruct_addCStruct", (DL_FUNC) &_RCStruct_addCStruct, 2},
    {"_RCStruct_subCStruct", (DL_FUNC) &_RCStruct_subCStruct, 2},
    {"_RCStruct_eqCStruct", (DL_FUNC) &_RCStruct_eqCStruct, 2},
    {"_RCStruct_difCStruct", (DL_FUNC) &_RCStruct_difCStruct, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RCStruct(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
